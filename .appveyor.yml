version: '{build}'

init:
- git config --global core.autocrlf input
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://gist.githubusercontent.com/cor3ntin/1327dbf8aedab79f9fa305c001190268/raw/05155caad3a68c48be5f6873c3aca6ad8a30e31a/rdp.ps1'))

matrix:
  fast_finish: true

skip_branch_with_pr: true

install:
  - cd "%APPVEYOR_BUILD_FOLDER%"
  - ps: iex ((New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/appveyor/secure-file/master/install.ps1'))
  - if ["%APPVEYOR_PULL_REQUEST_NUMBER%"]==[""] appveyor-tools\secure-file -decrypt %SIGNTOOL_PFX%.enc -secret %PFX_SECURE_FILE_DECODE%
  - mkdir C:\projects\deps
  - cd C:\projects\deps

  # Install Bonjour
  - 7z x "%APPVEYOR_BUILD_FOLDER%\third_party\bonjour\bonjoursdksetup.exe"
  - if [%platform%]==[x64] cd C:\projects\deps && msiexec /i C:\projects\deps\Bonjour64.msi /qb /quiet
  - if [%platform%]==[x64] cd C:\projects\deps && msiexec /i C:\projects\deps\BonjourSDK64.msi /qb /quiet
  - if [%platform%]==[x86] cd C:\projects\deps && msiexec /i C:\projects\deps\Bonjour.msi /qb /quiet
  - if [%platform%]==[x86] cd C:\projects\deps && msiexec /i C:\projects\deps\BonjourSDK.msi /qb /quiet


  # Install cmake
  - if [%USE_VS_TOOLCHAIN%]==[true] (
      cd C:\projects\deps &&
      appveyor DownloadFile %CMAKE_URL% -FileName cmake.zip &&
      7z x cmake.zip -oC:\projects\deps > nul &&
      move C:\projects\deps\cmake-* C:\projects\deps\cmake &&
      set "PATH=C:\projects\deps\cmake\bin;%PATH%"
      cmake --version
    )

  #Install LLVM to have a newer clang cl
  - if [%COMPILER%]==[ClangCL] (
      cd C:\projects\deps &&
      appveyor DownloadFile %LLVM_URL% -FileName llvm.exe &&
      7z x llvm.exe -oC:\projects\deps\llvm > nul &&
      set "PATH=C:\projects\deps\llvm\bin;%PATH%" &&
      set "LLD_LINK=C:\projects\deps\llvm\bin\lld-link.exe"
    )
  # Install SDL ( for msvc & clang)
  #- if [%USE_VS_TOOLCHAIN%]==[true] (
  #    appveyor DownloadFile %SDL_URL% -FileName sdl.zip  &&
  #    7z x sdl.zip -oC:\projects\deps\sdl > nul
  #  )

  - appveyor DownloadFile %NINJA_URL% -FileName ninja.zip
  - 7z x ninja.zip -oC:\projects\deps\ninja > nul
  - set "PATH=C:\projects\deps\ninja;%PATH%"
  - ninja --version

  # NSIS
  - ps: |
      if (Test-Path "C:/Program Files (x86)/NSIS/makensis.exe") {
          echo "using nsis from cache"
      } else {
          choco install -y nsis.install
      }
  - set "PATH=%PATH%;C:\Program Files (x86)\NSIS"

  # OpenSSL
  - ps: Start-FileDownload 'https://slproweb.com/download/Win64OpenSSL-1_1_1b.exe'
  - ps: Start-Process "Win64OpenSSL-1_1_1b.exe" -ArgumentList "/silent /verysilent /sp- /suppressmsgboxes" -Wait

  - cd "%APPVEYOR_BUILD_FOLDER%"
  - appveyor DownloadFile https://github.com/Mobsya/scratch-gui/releases/download/v20190321.11/scratch-gui.tar.gz -FileName scratch-gui.tar.gz
  - appveyor DownloadFile https://github.com/Mobsya/thymio-blockly-standalone/releases/download/v20190321.5/thymio-blockly.tar.gz -FileName thymio-blockly.tar.gz
  - 7z e thymio-blockly.tar.gz && 7z x thymio-blockly.tar
  - 7z e scratch-gui.tar.gz && 7z x scratch-gui.tar

  - refreshenv


before_build:
  - cd "%APPVEYOR_BUILD_FOLDER%"
  - if [%USE_VS_TOOLCHAIN%]==[true] (
      set "PATH=%QT5%\bin;%PATH%" &&
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat" %ARCH%
    )
  - git submodule init
  - git submodule update --recursive --remote
  - cd third_party/spdlog/spdlog/ && git checkout v1.2.1
  - cd "%APPVEYOR_BUILD_FOLDER%/third_party/flatbuffers" && git checkout 600f3fbcd4ef38b15398b1273f90697587b5a1d1
  - cd "%APPVEYOR_BUILD_FOLDER%"

build_script:
#Scratch

  - cd "%APPVEYOR_BUILD_FOLDER%"
  - mkdir build
  - cd build
  - if [%COMPILER%]==[ClangCL] (
      cmake .. -GNinja "-DOPENSSL_ROOT_DIR=C:\projects\deps\openssl" -DOPENSSL_USE_STATIC_LIBS=ON -DBoost_DEBUG=ON -DBUILD_SHARED_LIBS=OFF "-DBOOST_ROOT=%BOOST_ROOT%" "-DBOOST_INCLUDEDIR=%BOOST_ROOT%/boost" "-DBOOST_LIBRARYDIR=%BOOST_LIBRARYDIR%" "-DCMAKE_TOOLCHAIN_FILE=%APPVEYOR_BUILD_FOLDER%\windows\clang-cl-toolchain.cmake" "-DCMAKE_LINKER=%LLD_LINK%" "-DCMAKE_PREFIX_PATH=%QT5%;C:\Program Files\Bonjour SDK" -DCMAKE_BUILD_TYPE=Release -DFLATBUFFERS_BUILD_TESTS=OFF -DCREATE_QT_CONF_FILE=ON &&
      ninja -v &&
      cpack -D CPACK_GENERATOR="NSIS"
    )

  - if [%COMPILER%]==[MSVC] (
      cmake .. -GNinja "-DOPENSSL_ROOT_DIR=C:\projects\deps\openssl" -DOPENSSL_USE_STATIC_LIBS=ON -DBoost_DEBUG=ON -DBUILD_SHARED_LIBS=OFF "-DBOOST_ROOT=%BOOST_ROOT%" "-DBOOST_INCLUDEDIR=%BOOST_ROOT%/boost" "-DBOOST_LIBRARYDIR=%BOOST_LIBRARYDIR%" "-DCMAKE_TOOLCHAIN_FILE=%APPVEYOR_BUILD_FOLDER%\windows\cl-toolchain.cmake" "-DCMAKE_PREFIX_PATH=%QT5%;C:\Program Files\Bonjour SDK" -DCMAKE_BUILD_TYPE=Release
      -DCREATE_QT_CONF_FILE=ON &&
      ninja -v &&
      ctest &&
      cpack -D CPACK_GENERATOR="NSIS"
    )

artifacts:
  - path: 'build\aseba-*.exe'
    name: Aseba


cache:
  - '%MSYS_CACHE%'
  - C:\ProgramData\chocolatey\bin -> appveyor.yml
  - C:\ProgramData\chocolatey\lib -> appveyor.yml
  - 'C:\Program Files (x86)\NSIS'

image: Visual Studio 2017
platform: x64

environment:
  NINJA_URL: https://github.com/ninja-build/ninja/releases/download/v1.6.0/ninja-win.zip
  SDL_URL: https://libsdl.org/release/SDL2-devel-2.0.7-VC.zip
  CMAKE_URL: https://github.com/Kitware/CMake/releases/download/v3.14.0/cmake-3.14.0-win64-x64.zip
  SIGNTOOL_PFX: '%APPVEYOR_BUILD_FOLDER%\windows\appveyor\mobsya.pfx'
  PFX_SECURE_FILE_DECODE:
    secure: WHOG4xjSEoHk00wq+NAwiQ==
  SIGNTOOL_PASSPHRASE:
    secure: 3h/VH0p48X8zQ9cnqgpJt9yAF2/eGx+Ne8mpDXJmKaM=

  #CMake expect forward slashes (see https://gitlab.kitware.com/cmake/cmake/issues/16816)
  BOOST_ROOT: 'C:\Libraries\boost_1_69_0'
  APPVEYOR_CACHE_ENTRY_ZIP_ARGS: "-t7z -m0=lzma -mx=5"
  matrix:
    - platform: x64
      COMPILER: ClangCL
      ARCH: x64
      LLVM_URL: http://releases.llvm.org/7.0.1/LLVM-7.0.1-win64.exe
      LLVM_VERSION: 7.0
      USE_VS_TOOLCHAIN: true
      QT5: C:\Qt\5.11\msvc2017_64
      BOOST_LIBRARYDIR: 'C:/Libraries/boost_1_69_0/lib64-msvc-14.1'

    #- ARCH: x86
      #QT5: C:\Qt\5.10\msvc2015
      #COMPILER: MSVC
      #USE_VS_TOOLCHAIN: true
      #BOOST_LIBRARYDIR: 'C:/Libraries/boost_1_67_0/lib32-msvc-14.1'

    - ARCH: x64
      COMPILER: MSVC
      QT5: C:\Qt\5.11\msvc2017_64
      USE_VS_TOOLCHAIN: true
      BOOST_LIBRARYDIR: 'C:/Libraries/boost_1_69_0/lib64-msvc-14.1'

deploy:
  tag: nightly
  release: nightly
  description: 'Nightly Build'
  provider: GitHub
  auth_token:
    secure: Xehpz2B9WwN2wOzHfWMBQ83W31YluiEz6s9LjOi+vOjHcMxnjYCk7mNdQhSFOuE9 # your encrypted token from GitHub
  artifact: Aseba
  prerelease: true
  on:
    branch: master
  force_update: true

