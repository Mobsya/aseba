resources:
   containers:
   - container: fpkde
     options: '--privileged'
     image: mobsya/flatpak-builders:kde-latest

variables:
- group: passwords

jobs:
- job: 'BuildFlatpak'
  pool:
    vmImage: 'Ubuntu-16.04'
  container: fpkde
  steps:
  - script: |
      git submodule init
      git submodule update --recursive --remote
      (cd third_party/spdlog/spdlog/ && git checkout v1.2.1)
      flatpak-builder build-dir flatpak/org.mobsya.ThymioSuite.json --ccache --force-clean --keep-build-dirs -v --repo=bundle
      flatpak build-bundle --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo bundle $(Build.ArtifactStagingDirectory)/thymio.flatpak org.mobsya.ThymioSuite
    displayName: 'Build flatpak bundle'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'thymio.flatpak'

- job: BuilOnOsX
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '9.x'

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'Mobsya.p12'
      certPwd: $(mobsya-mac-p12)

  - task: DownloadBuildArtifacts@0
    inputs:
      downloadType: single
      project: '$(System.TeamProject)'
      pipeline: 'Mobsya.scratch-gui'
      artifactName: 'scratch-gui'
      downloadPath: $(Build.SourcesDirectory)
      buildType: specific
    displayName: 'Download scratch'


  - task: DownloadBuildArtifacts@0
    inputs:
      downloadType: single
      project: '$(System.TeamProject)'
      pipeline: 'Mobsya.thymio-blockly-standalone'
      artifactName: 'thymio-blockly'
      downloadPath: '$(Build.SourcesDirectory)'
      buildType: specific
    displayName: 'Download blockly'

  - script: |
      tar xzf scratch-gui/scratch.gui.tar.gz
      tar xzf thymio-blockly/thymio-blockly.tar.gz
    displayName: 'Extract scratch and blockly'

  - script: |
      brew update
      brew bundle
    displayName: 'Install dependencies with HomeBrew'

  - script: |
      git submodule init
      git submodule update --recursive --remote
      (cd third_party/spdlog/spdlog/ && git checkout v1.2.1)
    displayName: 'Clone submodules'

  - script: |
      sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer
      export CMAKE_PREFIX_PATH="${CMAKE_PREFIX_PATH}:$(brew --prefix qt)"
      (mkdir build && cd build &&  cmake .. -GNinja -DBoost_DEBUG=ON -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib -DOPENSSL_INCLUDE_DIR=/usr/local/opt/openssl/include -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF && ninja)
    displayName: 'Build with cmake'

  - script: |
      osx/createbundle.sh $(Build.ArtifactStagingDirectory)/ThymioSuite.dmg build/bin '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
    displayName: 'Signing and create dmg'
    condition: ne(variables['Build.Reason'], 'PullRequest')

  - script: |
      osx/createbundle.sh $(Build.ArtifactStagingDirectory)/ThymioSuite.dmg build/bin
    displayName: 'Create Unsigned DMG'
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'ThymioSuite.dmg'