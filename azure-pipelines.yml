resources:
   containers:
   - container: fpkde
     options: '--privileged'
     image: mobsya/flatpak-builders:kde-latest

variables:
- group: passwords
- name: blockly_version
  value: "v20190507.3"
- name: scratch_version
  value: "v20190820.1"
- name: blockly_url
  value: "https://github.com/Mobsya/thymio-blockly-standalone/releases/download/$(blockly_version)/thymio-blockly.tar.gz"
- name: scratch_url
  value: "https://github.com/Mobsya/scratch-gui/releases/download/$(scratch_version)/scratch-gui.tar.gz"
- name: vcpkg_commit
  value: "66fcabe4d86a0d071f41bd6d97d4ebdb617fa65c"

jobs:
- job: 'BuildFlatpak'
  pool:
    vmImage: 'Ubuntu-16.04'
  container: fpkde
  steps:
  - script: |
      git submodule update --init --recursive
      flatpak remote-add --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo
      flatpak-builder --user --install-deps-from=flathub --force-clean --keep-build-dirs -v --repo=bundle build-dir flatpak/org.mobsya.ThymioSuite.json
      flatpak build-bundle --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo bundle $(Build.ArtifactStagingDirectory)/thymio-suite.flatpak org.mobsya.ThymioSuite
    displayName: 'Build flatpak bundle'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'thymio-suite.flatpak'

- job: 'MSVC'
  pool:
      vmImage: windows-2019
  strategy:
    matrix:
      x64:
        ARCH: 'x64'
        vcpkgTriplet: 'x64-windows-static'
        QT_URL: "https://github.com/Mobsya/ci-data/releases/download/data/qt-5.12-msvc-x64.7z"
        CMAKE_PREFIX_PATH: $(Build.BinariesDirectory)/Qt/5.12.3/msvc2017_64/
        cmake_generator: "Ninja"
      x86:
        ARCH: 'x86'
        vcpkgTriplet: 'x86-windows-static'
        QT_URL: "https://github.com/Mobsya/ci-data/releases/download/data/qt-5.12-msvc-x86.7z"
        CMAKE_PREFIX_PATH: $(Build.BinariesDirectory)/Qt/5.12.3/msvc2017
        cmake_generator: "VS16Win32"
  steps:
  - script: |
       git submodule update --init --recursive
    displayName: Update submodules
  - script: |
       makensis  -VERSION
    displayName: Install NSIS
  - task: CacheBeta@0
    displayName: Cache vcpkg
    inputs:
      key: $(Build.SourcesDirectory)/vcpkg-list.txt| "$(vcpkg_commit)" | "windows-2019" | "4" | $(vcpkgTriplet)
      path: '$(Build.BinariesDirectory)/vcpkg'
  - task: CacheBeta@0
    displayName: 'Qt Cache'
    inputs:
      key:  Qt_5_12_3 | "$(QT_URL)" | "2"
      path: $(Build.BinariesDirectory)/Qt/
      cacheHitVar: QT_LIB_CACHE_RESTORED
  - task: lucappa.cmake-ninja-vcpkg-tasks.d855c326-b1c0-4d6f-b1c7-440ade6835fb.run-vcpkg@0
    displayName: 'Run vcpkg'
    inputs:
      vcpkgTriplet: '$(vcpkgTriplet)'
      vcpkgArguments: '@$(Build.SourcesDirectory)/vcpkg-list.txt'
      vcpkgGitCommitId: "$(vcpkg_commit)"
      vcpkgGitURL: https://github.com/mobsya/vcpkg.git
  - powershell: |
        Get-ChildItem $(Build.BinariesDirectory)/vcpkg -recurse -include *.o | remove-item
        Remove-Item -Recurse -Force $(Build.BinariesDirectory)/vcpkg/buildtrees -ErrorAction Ignore
        Remove-Item -Recurse -Force $(Build.BinariesDirectory)/vcpkg/downloads -ErrorAction Ignore
    displayName: 'Remove vcpkg object files'
  - powershell: |
        $output = [System.IO.Path]::GetTempFileName()
        Invoke-WebRequest -Verbose  -UseBasicParsing -Uri "$(QT_URL)" -OutFile $output
        7z -bb -y x  $output -o$(Build.BinariesDirectory)
    condition: ne(variables.QT_LIB_CACHE_RESTORED, 'true')
    displayName: Fetch Qt
  - task: PythonScript@0
    displayName: Fetch scratch and blockly
    inputs:
      scriptSource: 'inline'
      script: |
        from urllib.request import urlretrieve
        import tarfile
        def extract(url, file):
            print("{} -> {}".format(url, file))
            urlretrieve(url, file)
            tar = tarfile.open(file, "r:gz")
            tar.extractall()
            tar.close()
        extract('$(blockly_url)', 'thymio-blockly.tar.gz')
        extract('$(scratch_url)', 'scratch-gui.tar.gz')
  - task: DownloadSecureFile@1
    name: wincert
    inputs:
      secureFile: "mobsya-windows.pfx"
  - task: lucappa.cmake-ninja-vcpkg-tasks.f2b1ec7d-bc54-4cc8-b9ed-1bc7f37c9dc6.run-cmake@0
    displayName: 'Run CMake with Ninja'
    inputs:
      cmakeGenerator: $(cmake_generator)
      cmakeToolchainPath: $(Build.SourcesDirectory)\windows\cl-toolchain.cmake
      cmakeBuildType: Release
      useVcpkgToolchainFile: true
      vcpkgTriplet: '$(vcpkgTriplet)'
      buildDirectory: '$(Build.BinariesDirectory)'
  - task: CmdLine@2
    displayName: 'Run CPack'
    inputs:
      script: |
        if exist "C:\Program Files\CMake\bin" set PATH=C:\Program Files\CMake\bin;%PATH%
        cpack.exe -G NSIS
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.BinariesDirectory)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      contents: 'ThymioSuite-*.exe'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'ThymioSuite.exe'


- job: 'BuildAndroid_armeabi'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      armeabi:
        TARGET_ARCH: 'armeabi-v7a'
      aarch64:
        TARGET_ARCH: 'arm64-v8a'
      x86_64:
        TARGET_ARCH: 'x86_64'
  steps:
  - script: |
      docker pull mobsya/android-dev-env:$TARGET_ARCH
  - script: |
      wget -q $(blockly_url) && tar xzf thymio-blockly.tar.gz -C .
      wget -q $(scratch_url) && tar xzf scratch-gui.tar.gz -C .
    displayName: 'Extract scratch and blockly'

  - script: |
      git submodule update --init --recursive
    displayName: 'Clone submodules'

  - script: |
      sudo docker run --rm -e TARGET_ARCH=${TARGET_ARCH} -v $(pwd):/src:rw -v $(Build.ArtifactStagingDirectory):/build:rw mobsya/android-dev-env:$TARGET_ARCH /bin/bash -c 'cd /src && mkdir build && cd build && export CMAKE_PREFIX_PATH="/Qt/android_${TARGET_ARCH}" && cmake -DANDROID_PLATFORM=android-22 -DANDROID_ABI=${TARGET_ARCH}  -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake -DCMAKE_FIND_ROOT_PATH=/Qt/android_${TARGET_ARCH} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF ../ -GNinja && ninja && cp bin/*.apk /build/thymio-suite-${TARGET_ARCH}.apk'
    displayName: 'Build Thymio Suite'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'thymio-suite-android'

- job: BuilOnOsX
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '9.x'

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'Mobsya.p12'
      certPwd: $(mobsya-mac-p12)

  - script: |
      curl -sL $(blockly_url) | tar xzf - -C .
      curl -sL $(scratch_url) | tar xzf - -C .
    displayName: 'Extract scratch and blockly'

  - script: |
      brew update
      brew bundle
    displayName: 'Install dependencies with HomeBrew'

  - script: |
      git submodule update --init --recursive
    displayName: 'Clone submodules'

  - script: |
      sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer
      export CMAKE_PREFIX_PATH="${CMAKE_PREFIX_PATH}:$(brew --prefix qt)"
      (mkdir build && cd build &&  cmake .. -GNinja -DBoost_DEBUG=ON -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib -DOPENSSL_INCLUDE_DIR=/usr/local/opt/openssl/include -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF && ninja)
    displayName: 'Build with cmake'

  - script: |
      osx/createbundle.sh $(Build.ArtifactStagingDirectory)/ThymioSuite.dmg build/bin '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
    displayName: 'Signing and create dmg'
    condition: ne(variables['Build.Reason'], 'PullRequest')

  - script: |
      osx/createbundle.sh $(Build.ArtifactStagingDirectory)/ThymioSuite.dmg build/bin
    displayName: 'Create Unsigned DMG'
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'ThymioSuite.dmg'