resources:
   containers:
   - container: fpkde
     options: '--privileged'
     image: mobsya/flatpak-builders:kde-latest

variables:
- group: passwords

jobs:
- job: 'BuildFlatpak'
  pool:
    vmImage: 'Ubuntu-16.04'
  container: fpkde
  steps:
  - script: |
      git submodule update --init --recursive
      flatpak remote-add --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo
      flatpak-builder --user --install-deps-from=flathub --force-clean --keep-build-dirs -v --repo=bundle build-dir flatpak/org.mobsya.ThymioSuite.json
      flatpak build-bundle --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo bundle $(Build.ArtifactStagingDirectory)/thymio-suite.flatpak org.mobsya.ThymioSuite
    displayName: 'Build flatpak bundle'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'thymio-suite.flatpak'

- job: 'BuildAndroid_armeabi'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      armeabi:
        TARGET_ARCH: 'armeabi-v7a'
      aarch64:
        TARGET_ARCH: 'arm64-v8a'
      x86_64:
        TARGET_ARCH: 'x86_64'
  steps:
  - script: |
      docker pull mobsya/android-dev-env:$TARGET_ARCH
  - script: |
      wget -q https://github.com/Mobsya/thymio-blockly-standalone/releases/download/v20190507.3/thymio-blockly.tar.gz && tar xzf thymio-blockly.tar.gz -C .
      wget -q https://github.com/Mobsya/scratch-gui/releases/download/v20190606.2/scratch-gui.tar.gz && tar xzf scratch-gui.tar.gz -C .
    displayName: 'Extract scratch and blockly'

  - script: |
      git submodule update --init --recursive
    displayName: 'Clone submodules'

  - script: |
      sudo docker run --rm -e TARGET_ARCH=${TARGET_ARCH} -v $(pwd):/src:rw -v $(Build.ArtifactStagingDirectory):/build:rw mobsya/android-dev-env:$TARGET_ARCH /bin/bash -c 'cd /src && mkdir build && cd build && export CMAKE_PREFIX_PATH="/Qt/android_${TARGET_ARCH}" && cmake -DANDROID_PLATFORM=android-22 -DANDROID_ABI=${TARGET_ARCH}  -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake -DCMAKE_FIND_ROOT_PATH=/Qt/android_${TARGET_ARCH} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF ../ -GNinja && ninja && cp bin/*.apk /build/thymio-suite-${TARGET_ARCH}.apk'
    displayName: 'Build Thymio Suite'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'thymio-suite-android'

- job: BuilOnOsX
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '9.x'

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'Mobsya.p12'
      certPwd: $(mobsya-mac-p12)

  - script: |
      curl -sL https://github.com/Mobsya/thymio-blockly-standalone/releases/download/v20190507.3/thymio-blockly.tar.gz | tar xzf - -C .
      curl -sL https://github.com/Mobsya/scratch-gui/releases/download/v20190606.2/scratch-gui.tar.gz | tar xzf - -C .
    displayName: 'Extract scratch and blockly'

  - script: |
      brew update
      brew bundle
    displayName: 'Install dependencies with HomeBrew'

  - script: |
      git submodule update --init --recursive
    displayName: 'Clone submodules'

  - script: |
      sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer
      export CMAKE_PREFIX_PATH="${CMAKE_PREFIX_PATH}:$(brew --prefix qt)"
      (mkdir build && cd build &&  cmake .. -GNinja -DBoost_DEBUG=ON -DOPENSSL_LIBRARIES=/usr/local/opt/openssl/lib -DOPENSSL_INCLUDE_DIR=/usr/local/opt/openssl/include -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF && ninja)
    displayName: 'Build with cmake'

  - script: |
      osx/createbundle.sh $(Build.ArtifactStagingDirectory)/ThymioSuite.dmg build/bin '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
    displayName: 'Signing and create dmg'
    condition: ne(variables['Build.Reason'], 'PullRequest')

  - script: |
      osx/createbundle.sh $(Build.ArtifactStagingDirectory)/ThymioSuite.dmg build/bin
    displayName: 'Create Unsigned DMG'
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'ThymioSuite.dmg'